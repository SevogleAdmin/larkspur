package com.sevogle.link.common.web.client;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class MessageDB implements Serializable {
    private static final long serialVersionUID = 6546136861916164164L;

    private String _id = ""; // GUID generated by the message creator
    public static final String ID = "_id";
    private MessageState state;
    private String channelId;
    private String userId;
    public static final String USERID = "userId";
    private String protocolSpecificId;
    public static final String PROTOCOL_SPECIFIC_ID = "protocolSpecificId";
    private MessageSource messageSource;
    private long sent; // timestamp
    public static final String SENT = "sent";
    private long received;
    private String subjectNormalized;
    private String subjectRaw;
    private RelatedMessageDescriptor parent;
    private RelatedMessageDescriptor inReplyTo;
    public static final String PARENT = "parent.messageId";
    public static final String PARENT_PROTOCOL_SPECIFIC = "parent.protocolSpecificId";
    private AddressDescriptor from;
    private AddressDescriptor replyTo;
    private List<AddressDescriptor> to = new ArrayList<AddressDescriptor>();
    private List<AddressDescriptor> cc = new ArrayList<AddressDescriptor>();
    private List<AddressDescriptor> bcc = new ArrayList<AddressDescriptor>();
    private List<NormativeBlockDescriptor> normalizedMessage = new ArrayList<NormativeBlockDescriptor>();
    private List<MessageContentDescriptor> contentObjects = new ArrayList<MessageContentDescriptor>();
    private List<NameValuePair> headers = new ArrayList<NameValuePair>();
    private String preamble;
    private boolean seen;

    public MessageDB() {
    }

    public MessageDB(String _id, String userId, MessageState state, String channelId, String protocolSpecificId,
            MessageSource messageSource, long sent, long received, String subjectNormalized, String subjectRaw,
            RelatedMessageDescriptor parent, AddressDescriptor from, AddressDescriptor replyTo, String preamble, boolean seen) {
        this._id = _id;
        this.state = state;
        this.channelId = channelId;
        this.protocolSpecificId = protocolSpecificId;
        this.messageSource = messageSource;
        this.sent = sent;
        this.received = received;
        this.subjectNormalized = subjectNormalized;
        this.subjectRaw = subjectRaw;
        this.parent = parent;
        this.from = from;
        this.replyTo = replyTo;
        this.userId = userId;
        this.preamble = preamble;
        this.seen = seen;
    }

    public String getId() {
        return _id;
    }

    public void setId(String id) {
        _id = id;
    }

    public MessageState getState() {
        return state;
    }

    public void setState(MessageState state) {
        this.state = state;
    }

    public String getChannelId() {
        return channelId;
    }

    public void setChannelId(String channelId) {
        this.channelId = channelId;
    }

    public String getProtocolSpecificId() {
        return protocolSpecificId;
    }

    public void setProtocolSpecificId(String protocolSpecificId) {
        this.protocolSpecificId = protocolSpecificId;
    }

    public MessageSource getMessageSource() {
        if (messageSource == null) {
            //TODO: abovill 6/20/2011: Needs to be set appropriately by channel
            return MessageSource.INBOUND;
        }
        return messageSource;
    }

    public void setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }

    public long getSent() {
        return sent;
    }

    public void setSent(long sent) {
        this.sent = sent;
    }

    public long getReceived() {
        return received;
    }

    public void setReceived(long received) {
        this.received = received;
    }

    public String getSubjectNormalized() {
        return subjectNormalized;
    }

    public void setSubjectNormalized(String subjectNormalized) {
        this.subjectNormalized = subjectNormalized;
    }

    public String getSubjectRaw() {
        return subjectRaw;
    }

    public void setSubjectRaw(String subjectRaw) {
        this.subjectRaw = subjectRaw;
    }

    public RelatedMessageDescriptor getParent() {
        return parent;
    }

    public void setParent(RelatedMessageDescriptor parent) {
        this.parent = parent;
    }

    public AddressDescriptor getFrom() {
        return from;
    }

    public void setFrom(AddressDescriptor from) {
        this.from = from;
    }

    public AddressDescriptor getReplyTo() {
        return replyTo;
    }

    public void setReplyTo(AddressDescriptor replyTo) {
        this.replyTo = replyTo;
    }

    public List<AddressDescriptor> getTo() {
        return to;
    }

    public List<AddressDescriptor> getCc() {
        return cc;
    }

    public List<AddressDescriptor> getBcc() {
        return bcc;
    }

    public List<NormativeBlockDescriptor> getNormalizedMessage() {
        return normalizedMessage;
    }

    public List<MessageContentDescriptor> getContentObjects() {
        return contentObjects;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public void setPreamble(String preamble) {
        this.preamble = preamble;
    }

    public String getPreamble() {
        return preamble;
    }

    public List<NameValuePair> getHeaders() {
        return headers;
    }

    public boolean isSeen() {
        return seen;
    }

    public void setSeen(boolean seen) {
        this.seen = seen;
    }

    public RelatedMessageDescriptor getInReplyTo() {
        return inReplyTo;
    }

    public void setInReplyTo(RelatedMessageDescriptor inReplyTo) {
        this.inReplyTo = inReplyTo;
    }

    @Override
    public String toString() {
        return "MessageDB [_id=" + _id + ", state=" + state + ", channelId=" + channelId + ", userId=" + userId
                + ", protocolSpecificId=" + protocolSpecificId + ", messageSource=" + messageSource + ", sent=" + sent
                + ", received=" + received + ", subjectNormalized=" + subjectNormalized + ", subjectRaw=" + subjectRaw
                + ", parent=" + parent + ", inReplyTo=" + inReplyTo + ", from=" + from + ", replyTo=" + replyTo + ", to="
                + to + ", cc=" + cc + ", bcc=" + bcc + ", preamble=" + preamble + ", seen=" + seen + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((_id == null) ? 0 : _id.hashCode());
        result = prime * result + ((bcc == null) ? 0 : bcc.hashCode());
        result = prime * result + ((cc == null) ? 0 : cc.hashCode());
        result = prime * result + ((channelId == null) ? 0 : channelId.hashCode());
        result = prime * result + ((contentObjects == null) ? 0 : contentObjects.hashCode());
        result = prime * result + ((from == null) ? 0 : from.hashCode());
        result = prime * result + ((headers == null) ? 0 : headers.hashCode());
        result = prime * result + ((inReplyTo == null) ? 0 : inReplyTo.hashCode());
        result = prime * result + ((messageSource == null) ? 0 : messageSource.hashCode());
        result = prime * result + ((normalizedMessage == null) ? 0 : normalizedMessage.hashCode());
        result = prime * result + ((parent == null) ? 0 : parent.hashCode());
        result = prime * result + ((preamble == null) ? 0 : preamble.hashCode());
        result = prime * result + ((protocolSpecificId == null) ? 0 : protocolSpecificId.hashCode());
        result = prime * result + (int) (received ^ (received >>> 32));
        result = prime * result + ((replyTo == null) ? 0 : replyTo.hashCode());
        result = prime * result + (seen ? 1231 : 1237);
        result = prime * result + (int) (sent ^ (sent >>> 32));
        result = prime * result + ((state == null) ? 0 : state.hashCode());
        result = prime * result + ((subjectNormalized == null) ? 0 : subjectNormalized.hashCode());
        result = prime * result + ((subjectRaw == null) ? 0 : subjectRaw.hashCode());
        result = prime * result + ((to == null) ? 0 : to.hashCode());
        result = prime * result + ((userId == null) ? 0 : userId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        MessageDB other = (MessageDB) obj;
        if (_id == null) {
            if (other._id != null) {
                return false;
            }
        } else if (!_id.equals(other._id)) {
            return false;
        }
        if (bcc == null) {
            if (other.bcc != null) {
                return false;
            }
        } else if (!bcc.equals(other.bcc)) {
            return false;
        }
        if (cc == null) {
            if (other.cc != null) {
                return false;
            }
        } else if (!cc.equals(other.cc)) {
            return false;
        }
        if (channelId == null) {
            if (other.channelId != null) {
                return false;
            }
        } else if (!channelId.equals(other.channelId)) {
            return false;
        }
        if (contentObjects == null) {
            if (other.contentObjects != null) {
                return false;
            }
        } else if (!contentObjects.equals(other.contentObjects)) {
            return false;
        }
        if (from == null) {
            if (other.from != null) {
                return false;
            }
        } else if (!from.equals(other.from)) {
            return false;
        }
        if (headers == null) {
            if (other.headers != null) {
                return false;
            }
        } else if (!headers.equals(other.headers)) {
            return false;
        }
        if (inReplyTo == null) {
            if (other.inReplyTo != null) {
                return false;
            }
        } else if (!inReplyTo.equals(other.inReplyTo)) {
            return false;
        }
        if (messageSource != other.messageSource) {
            return false;
        }
        if (normalizedMessage == null) {
            if (other.normalizedMessage != null) {
                return false;
            }
        } else if (!normalizedMessage.equals(other.normalizedMessage)) {
            return false;
        }
        if (parent == null) {
            if (other.parent != null) {
                return false;
            }
        } else if (!parent.equals(other.parent)) {
            return false;
        }
        if (preamble == null) {
            if (other.preamble != null) {
                return false;
            }
        } else if (!preamble.equals(other.preamble)) {
            return false;
        }
        if (protocolSpecificId == null) {
            if (other.protocolSpecificId != null) {
                return false;
            }
        } else if (!protocolSpecificId.equals(other.protocolSpecificId)) {
            return false;
        }
        if (received != other.received) {
            return false;
        }
        if (replyTo == null) {
            if (other.replyTo != null) {
                return false;
            }
        } else if (!replyTo.equals(other.replyTo)) {
            return false;
        }
        if (seen != other.seen) {
            return false;
        }
        if (sent != other.sent) {
            return false;
        }
        if (state != other.state) {
            return false;
        }
        if (subjectNormalized == null) {
            if (other.subjectNormalized != null) {
                return false;
            }
        } else if (!subjectNormalized.equals(other.subjectNormalized)) {
            return false;
        }
        if (subjectRaw == null) {
            if (other.subjectRaw != null) {
                return false;
            }
        } else if (!subjectRaw.equals(other.subjectRaw)) {
            return false;
        }
        if (to == null) {
            if (other.to != null) {
                return false;
            }
        } else if (!to.equals(other.to)) {
            return false;
        }
        if (userId == null) {
            if (other.userId != null) {
                return false;
            }
        } else if (!userId.equals(other.userId)) {
            return false;
        }
        return true;
    }

}
